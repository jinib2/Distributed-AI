/**
* Name: NQUEEN
* Based on the internal empty template. 
* Author: Fabio
* Tags: 
*/


/* TO DO
 * 
 * 1) propagate the forbidden cells to successors (of succ)!!! lines 134 going on ...
 * 2) remember, when STUCK we want to re-initialize the jj (queen to reposition) and handle the forbidden of the stuck queen and predecessor!!!!!!! 
 *    just go backwards... decrease jj until we find still valueable positions !
 */

model NQUEEN

global{
	/* Number of cells and Queens. */
	int N <- 10;
	
	int jj <- 0;
	int ii <- 0;
	
	int jj_stuck;	
	
	/* Boolean to start the movement of Queens */
	bool start <- true;
	bool complete <- false;
	bool stuck <- false;
	
	init{
		create Queen number: N { color <- #blue; }
		create Controller number: 1 { }
	}
}


grid chessboard width: N height: N neighbors: 4 {
	rgb black <- #black;
	rgb white <- #white;
	
	init {
		/* Init the colors */
        loop x over: grid_x{
        	loop y over:grid_y{
        		if ( even( int(x) + int(y) ) ) {
        			color <- white;
        		}
        		else {
        			color <- black;
        		}
        	}
        }
    }
}

species Controller {
	list<Queen> queens;
	list<Queen> current_queens <- [];
	
	
	init{
		/* Init the list of all queens, length = N */
        ask(Queen){
        	add self to: myself.queens;	
        }
        
        /* Place the Queen at beginning */
        int i <- 0;
        float cell_size <- (100/N);
        loop q over: self.queens{
        	ask(q){
        		self.location <- { (i*cell_size + (cell_size/2)) , -5};
        	}	
        	i <- i + 1;	
        }
        
    /* Init predecessor and successor for each Queen */
        loop n from: 0 to: N-1{
        	if (n = 0) {
        		ask(self.queens[n]){
        			self.predecessor <- [];
        			self.successor <- myself.queens[n+1];
        		}
        	}
        	else if (n = N-1){
        		ask(self.queens[n]){
        			self.predecessor <- myself.queens[n-1];
        			self.successor <- [];
        		}	
        	}
        	else {
        		ask(self.queens[n]){
        			self.predecessor <- myself.queens[n-1];
        			self.successor <- myself.queens[n+1];
        		}
        	}	
        }   
	}
	
	
	/* MOVE THE QUEENS ONE BY ONE */
	reflex when: (start and !stuck){
		float cell_size <- 100/N;
		
		loop while: (jj != N){
			Queen q <- self.queens[jj];
			
			if ( length(self.current_queens) > 1 ){
				
//				loop curr from: 0 to: length(self.current_queens)-2 {
//					
//					Queen curr_queen <- self.current_queens[curr];
//					 
//					int pred_pos_i <- curr_queen.cell_taken_x;
//					int pred_pos_j <- curr_queen.cell_taken_y;
//					
//					/* Forbid same row! */
//					add pred_pos_i to: q.forbidden_rows;
//					
//					/* Forbid diagonal position! */
//					loop i_curr from: 0 to: N-1{	
//						bool cond1 <- ((pred_pos_i+pred_pos_j) = (i_curr+curr)) ;
//						bool cond2 <- ((pred_pos_j-pred_pos_i) = (curr-i_curr)) ;
//						
//						if (cond1 or cond2){
//							add i_curr to: q.forbidden_rows;
//						}
//					}
//				}
				
				loop Q over: self.current_queens{
					int pred_pos_i <- Q.cell_taken_x;
					int pred_pos_j <- Q.cell_taken_y;
					
					/* Forbid same row! */
					add pred_pos_i to: q.forbidden_rows;
					
					/* Forbid diagonal position! */
					loop i_Q from: 0 to: N-1{	
						bool cond1 <- ((pred_pos_i+pred_pos_j) = (i_Q+jj) ) ;
						bool cond2 <- ((pred_pos_j-pred_pos_i) = (jj-i_Q) ) ;
						
						if (cond1 or cond2){
							add i_Q to: q.forbidden_rows;
						}
					}
					
				}
				
			}
			
			if ( q = self.queens[N-1] ){
				loop qq over: self.current_queens{
					int pred_pos_i <- qq.cell_taken_x;
					int pred_pos_j <- qq.cell_taken_y;
					
					/* Forbid same row! */
					add pred_pos_i to: q.forbidden_rows;
					
					/* Forbid diagonal position! */
					loop i_qq from: 0 to: N-1{	
						bool cond1 <- ((pred_pos_i+pred_pos_j) = (i_qq+N-1)) ;
						bool cond2 <- ((pred_pos_j-pred_pos_i) = ((N-1)-i_qq)) ;
						
						if (cond1 or cond2){
							add i_qq to: q.forbidden_rows;
						}
					}	
					
				}
			}
			
			
			list<int> forbidden <- remove_duplicates(q.forbidden_rows);
				if ( length(forbidden) = N ) {
					jj_stuck <- jj;
					write "OH NO! Nowhere to go. I'm " + q.name + " ( jj_stuck = "+ jj_stuck + " ).";
					write "I need to ask " + q.predecessor.name + " to reposition.";
					stuck <- true;
					break;
				}
				else {
					if (ii in forbidden){
						write q.name + ": WAIT! position (" + ii + ", " + jj + ") is forbidden. Trying the next one: (" + (ii+1) + ", " + jj + ").";
						ii <- ii + 1;
						break;
					}
					else{
						float center_x <- ( jj*cell_size + (cell_size/2) ) ;
						float center_y <- ( ii*cell_size + (cell_size/2) ) ;
						point target <- {center_x, center_y};
						ask (q){
							if (q.successor = nil){
								do goto target: target speed: 1.0;
								if (self.location = target){
									complete <- true;
									start <- false;
									self.cell_taken_x <- ii;
									self.cell_taken_y <- jj;
									add ii to: self.forbidden_rows;
									add self to: myself.current_queens;
									jj <- jj + 1 ;
									break;
								}
							}

							do goto target: target speed: 0.2;
							if (q.location = target){
								Queen succ <- q.successor;
								 ask (succ){
									if (ii = 0){
										add (ii+1) to: self.forbidden_rows;
										add ii to: self.forbidden_rows;
									}
									else if (ii = N-1) {
										add (ii-1) to: self.forbidden_rows;
										add ii to: self.forbidden_rows;
									}
									else {
										add (ii-1) to: self.forbidden_rows;
										add ii to: self.forbidden_rows;
										add (ii+1) to: self.forbidden_rows;		
									}
									
								}
								self.cell_taken_x <- ii;
								self.cell_taken_y <- jj;
								add ii to: self.forbidden_rows;
								add self to: myself.current_queens;
								jj <- jj + 1;
								ii <- 0;
							}			
						}	
					}
				}
				//add q to: self.current_queens;	
			}	
		}
		
	reflex go_backwards when: stuck{
		
		Queen stuck_queen <- self.queens[jj_stuck];
		stuck_queen.forbidden_rows <- [];
		
		loop j from: length(self.current_queens)-1 to: 0{
			Queen pred <- self.current_queens[j];
			if ( length(pred.forbidden_rows) = N ){
				jj_stuck <- jj_stuck - 1;
				write pred.name + ": Oops... I'm stuck too. Gonna ask " + pred.predecessor.name + " to reposition!";
				write "So... jj_stuck = " + jj_stuck;
				pred.forbidden_rows <- [];
				remove pred from: self.current_queens;
				break;
			}
			else {
				jj <- j ;
				remove pred from: self.current_queens;
				stuck <- false;
				break;
			}
		} 
		
	}
	
	reflex declare_victory when: complete{
		write " --------------------------------- ";
		write " ****   YEAAH! We did it !!   ****";
		write " --------------------------------- ";		
		
		complete <- false;
	}			
		
}	



species Queen skills: [moving, fipa]{
	
	bool initialized <- false;
	Queen predecessor;
	Queen successor;
	
	int cell_taken_x ;
	int cell_taken_y ;
	
	list<int> forbidden_rows <- [];
	
	aspect{
		draw sphere(2) color: color;
	}

}

experiment main type: gui{
	output {
    	display map type: opengl{
        	grid chessboard lines: #black;
        	species Queen;
        	species Controller;
    	}
	}
}